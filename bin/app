#!/usr/bin/env ruby
$:.unshift File.expand_path('../../lib', __FILE__)
require 'commander'
require 'trafikverket'
require 'terminal-table'
require 'time'

class MyApp
  include Commander::Methods

  @@reqests = 0
  @@notifications = 0

  def run
    # init configuration
    Trafikverket::Config.init

    program :name, 'Trafikverket'
    program :version, Trafikverket::VERSION
    program :description, 'Monitor available Swedish driving test and get notified when there are new recent tests come up'
    global_option '-i', '--interval SECONDS', Integer, 'Interval in seconds'
    default_command :help

    command :run do |c|
      c.syntax = 'app run'
      c.description = 'Run monitor'
      c.action do |args, options|
        options.default :interval => 60
        _ask(true)
        _interval = [30, options.interval].max

        @client = Trafikverket::Client.new(ENV['USER_AGENT'])
        while true do
          @@reqests = @@reqests + 1

          @client.request(Trafikverket::BokaForm.new().populate(
            @input[:person_id],
            @input[:location],
            @input[:language],
            @input[:vehicle_type]
          ).to_json)
          _print_table

          # send notifications
          _notify(@input[:week])

          # wait...
          sleep _interval
        end
      end
    end

    command :show do |c|
      c.syntax = 'app show'
      c.description = 'Only displays the earlest of available driving tests'
      c.action do |args, options|
        _ask(false)
        @client = Trafikverket::Client.new(ENV['USER_AGENT'])
        @client.request(Trafikverket::BokaForm.new().populate(
          @input[:person_id],
          @input[:location],
          @input[:language],
          @input[:vehicle_type]
        ).to_json)
        _print_table
      end
    end

    run!
  end

  def _ask(notification = true)
    @input = {}
    @input[:name] = ask("Name (for notification): ") if notification
    @input[:person_id] = ask("Person ID (example 19801201-3333): ")
    @input[:vehicle_type] = choose("Vehicle Type?", :automatic, :manual)
    @input[:language] = choose("Language?", :english, :swedish)
    @input[:location] = choose("Location?", :stockholm, :sollentuna, :jakobsberg, :farsta)
    @input[:week] = ask("You expect to get new examination which within how many weeks? ", Integer) { |q| q.in = 1..24 } if notification

    _languages = {
      :english => Trafikverket::BokaForm::VAR_LANG_ENGLISH,
      :swedish => Trafikverket::BokaForm::VAR_LANG_SWEDISH
    }
    _vehicle_types = {
      :automatic => Trafikverket::BokaForm::VAR_VEHICLE_AUTO,
      :manual => Trafikverket::BokaForm::VAR_VEHICLE_MANUAL
    }
    _locations = {
      :stockholm => Trafikverket::BokaForm::VAR_LOCATION_STOCKHOLM,
      :sollentuna => Trafikverket::BokaForm::VAR_LOCATION_SOLLENTUNA,
      :jakobsberg => Trafikverket::BokaForm::VAR_LOCATION_JAKOBSBERG,
      :farsta => Trafikverket::BokaForm::VAR_LOCATION_FARSTA
    }

    @ask_detail = "(id: #{@input[:person_id]}, vehicle: #{@input[:vehicle_type]}, language: #{@input[:language]}, location: #{@input[:location]})"

    @input[:language] = _languages[@input[:language]]
    @input[:vehicle_type] = _vehicle_types[@input[:vehicle_type]]
    @input[:location] = _locations[@input[:location]]
    _clean_terminal_screen
  end

  def _clean_terminal_screen
    puts "\e[H\e[2J"
  end

  def _print_table
    rows = []
    data = @client.get_all
    _clean_terminal_screen if data.length > 0

    data.each_with_index do |v, k|
      rows << [k+1, v[:TEST_KNOWLEGE].info, v[:TEST_KNOWLEGE].in_weeks, v[:TEST_DRIVING].info, v[:TEST_DRIVING].in_weeks]
    end
    table = Terminal::Table.new :headings => ['ID', 'Knowlege', 'Weeks', 'Driving', 'Weeks'], :rows => rows

    title = "Fetch update ... [TIME #{Time.now}]"
    title << (@@reqests > 0 ? " [REQUESTS #{@@reqests}]" : "")
    title << (@@notifications > 0 ? " [SLACK #{@@notifications}]" : "")
    puts title
    puts (rows.length > 0 ? table : " No records")
    puts ""
    puts @ask_detail
    puts ""
  end

  def _notify(week)
    list = []
    @client.get_all().each do |v|
      unless v[:TEST_KNOWLEGE].date.nil?
        list << v if v[:TEST_KNOWLEGE].in_weeks <= week
      else
        list << v if v[:TEST_DRIVING].in_weeks <= week
      end
    end

    if list.length > 0
      s = Trafikverket::Slack.new ENV['SLACK_TOKEN'], ENV['SLACK_CHANNELS']
      msg = ["Hi #{@input[:name]}, Found new examinations <!channel>"]
      list.each do |v|
        msg << "knowlege: #{v[:TEST_KNOWLEGE].info}    driving: #{v[:TEST_DRIVING].info}"
      end
      s.post_text msg.join("\n")
      @@notifications = @@notifications + 1

      puts "Found #{list.length} new examinations, send notification"
      puts ""
    end
  end

end

MyApp.new.run if $0 == __FILE__


