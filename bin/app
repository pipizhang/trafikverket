#!/usr/bin/env ruby
$:.unshift File.expand_path('../../lib', __FILE__)
require 'commander'
require 'trafikverket'
require 'terminal-table'
require 'time'

class MyApp
  include Commander::Methods

  @@reqests = 0
  @@notifications = 0

  def run
    # init configuration
    Trafikverket::Config.init

    program :name, 'Trafikverket'
    program :version, Trafikverket::VERSION
    program :description, 'Monitor available Swedish driving test and get notified when there are new recent tests come up'
    default_command :help

    command :run do |c|
      c.syntax = 'app run'
      c.description = 'Run monitor'
      c.option '--interval SECONDS', Integer, 'Interval in seconds'
      c.option '--week WEEKS', Integer, 'When do you want to do the tests?'
      c.action do |args, options|
        options.default \
          :interval => 60,
          :week => 2

        # parse args
        _interval = [30, options.interval].max
        _week = [1, options.week].max

        @client = Trafikverket::Client.new(Trafikverket::Config.curl_file)
        while true do
          @@reqests = @@reqests + 1
          @client.request
          _print_table

          # send notifications
          _notify(_week)

          # wait...
          sleep _interval
        end
      end
    end

    command :show do |c|
      c.syntax = 'app show'
      c.description = 'Only displays the earlest of available driving tests'
      c.action do |args, options|
        @client = Trafikverket::Client.new(Trafikverket::Config.curl_file)
        @client.request
        _print_table
      end

    end

    run!
  end

  def _print_table
    rows = []
    n = 1
    @client.get_all().each do |v|
      rows << [n, v[:TEST_KNOWLEGE].info, v[:TEST_KNOWLEGE].in_weeks, v[:TEST_DRIVING].info, v[:TEST_DRIVING].in_weeks]
      n = n + 1
    end
    table = Terminal::Table.new :headings => ['ID', 'Knowlege', 'Weeks', 'Driving', 'Weeks'], :rows => rows

    puts "\e[H\e[2J"
    title = "Fetch update ... [TIME #{Time.now}]"
    title << (@@reqests > 0 ? " [REQUESTS #{@@reqests}]" : "")
    title << (@@notifications > 0 ? " [SLACK #{@@notifications}]" : "")
    puts title
    puts table
    puts ""
  end

  def _notify(week)
    list = []
    @client.get_all().each do |v|
      #puts "#{v[:TEST_KNOWLEGE].in_weeks} <= #{week}"
      list << v if v[:TEST_KNOWLEGE].in_weeks <= week
    end

    if list.length > 0
      s = Trafikverket::Slack.new ENV['SLACK_TOKEN'], ENV['SLACK_CHANNELS']
      msg = ["Found new examinations"]
      list.each do |v|
        msg << "knowlege: #{v[:TEST_KNOWLEGE].info}    driving: #{v[:TEST_DRIVING].info}"
      end
      s.post_text msg.join("\n")
      @@notifications = @@notifications + 1

      puts "Found #{list.length} new examinations, send notification"
      puts ""
    end
  end

end

MyApp.new.run if $0 == __FILE__


